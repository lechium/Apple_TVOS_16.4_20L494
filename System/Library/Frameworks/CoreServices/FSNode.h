//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSURL;

__attribute__((visibility("hidden")))
@interface FSNode : NSObject
{
    NSURL *_url;	// 8 = 0x8
    unsigned long long _cacheExpiration;	// 16 = 0x10
    unsigned int _isDirectory:2;	// 24 = 0x18
    unsigned int _hasReferringAliasNode:1;	// 24 = 0x18
    unsigned int _canUseFileCache:1;	// 24 = 0x18
    unsigned int _isInitialized:1;	// 24 = 0x18
}

+ (_Bool)supportsSecureCoding;	// IMP=0x001000000000ef3b
+ (id)_resolvedNodeFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x00100000000107b4
+ (id)_resolvedURLFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x001000000001064c
+ (id)systemDataVolumeNode;	// IMP=0x00100000000118fd
+ (id)prebootVolumeNode;	// IMP=0x001000000001182f
+ (id)rootVolumeNode;	// IMP=0x0010000000011761
+ (_Bool)canReadMetadataOfURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000013176
+ (_Bool)canWriteURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x001000000001315d
+ (_Bool)canReadURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000013144
+ (_Bool)canReadMetadataOfURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000012f40
+ (_Bool)canWriteURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000012f27
+ (_Bool)canReadURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000012f0e
+ (_Bool)canAccessURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2 operation:(const char *)arg3;	// IMP=0x0010000000012d16
+ (_Bool)canAccessURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2 operation:(const char *)arg3;	// IMP=0x0010000000012be9
+ (_Bool)getFileSystemRepresentation:(char [1024])arg1 forBookmarkData:(id)arg2;	// IMP=0x001000000001477f
+ (_Bool)isBookmarkDataFull:(id)arg1;	// IMP=0x00100000000146f7
+ (_Bool)getVolumeIdentifier:(unsigned long long *)arg1 forBookmarkData:(id)arg2 error:(id *)arg3;	// IMP=0x001000000001466f
+ (id)nameForBookmarkData:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000144e5
+ (id)pathForBookmarkData:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000142ca
+ (unsigned char)compareBookmarkData:(id)arg1 toBookmarkData:(id)arg2;	// IMP=0x001000000001407a
+ (id)injectSimulatorRootIntoBookmarkData:(id)arg1;	// IMP=0x0010000000013c89
+ (id)removeSimulatorRootFromBookmarkData:(id)arg1;	// IMP=0x0010000000013af5
+ (id)simulatorRootPath;	// IMP=0x00100000000139af
- (void).cxx_destruct;	// IMP=0x000000000000ef43
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000000ed2a
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000000000ec62
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000000ea4c
- (id)redactedDescription;	// IMP=0x000000000000e9f7
- (id)description;	// IMP=0x000000000000e913
- (unsigned long long)hash;	// IMP=0x000000000000e89d
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000000e6b9
- (void)prepareForReuse;	// IMP=0x000000000000e5f2
- (id)initWithURL:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000e0bf
- (id)initTemporaryNodeOnVolume:(id)arg1 flags:(unsigned int)arg2 fileDescriptor:(int *)arg3 error:(id *)arg4;	// IMP=0x000000000000f60b
- (id)initWithConfigurationString:(int)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000f52a
- (id)initWithDirectory:(unsigned long long)arg1 inDomain:(unsigned long long)arg2 lastPathComponent:(id)arg3 createIntermediateDirectories:(_Bool)arg4 flags:(unsigned int)arg5 error:(id *)arg6;	// IMP=0x000000000000f24c
- (id)initWithFileSystemRepresentation:(const char *)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000f0ce
- (id)initWithPath:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000ef53
- (_Bool)checkResourceIsReachableAndReturnError:(id *)arg1;	// IMP=0x00000000000101e2
- (void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000010175
- (_Bool)getTemporaryResourceValue:(id *)arg1 forKey:(id)arg2;	// IMP=0x000000000001015d
- (void)removeCachedResourceValueForKey:(id)arg1;	// IMP=0x0000000000010105
- (_Bool)setResourceValue:(id)arg1 forKey:(id)arg2 options:(unsigned char)arg3 error:(id *)arg4;	// IMP=0x000000000000ff69
- (_Bool)getResourceValue:(id *)arg1 forKey:(id)arg2 options:(unsigned char)arg3 error:(id *)arg4;	// IMP=0x000000000000fc14
- (void)clearURLPropertyCacheIfStale;	// IMP=0x000000000000fb75
@property(readonly, nonatomic) NSURL *URL;
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x0000000000010a80
- (id)resolvedNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x000000000001098a
- (void)setReferringAliasNode:(id)arg1;	// IMP=0x000000000001060d
@property(readonly, nonatomic) FSNode *referringAliasNode;
- (id)diskImageURLWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x0000000000010578
- (id)volumeNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x00000000000104db
- (id)childNodeWithRelativePath:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000001020b
@property(readonly, nonatomic) _Bool hasHiddenExtension;
@property(readonly, nonatomic, getter=isHidden) _Bool hidden;
@property(readonly, nonatomic, getter=isRegularFile) _Bool regularFile;
@property(readonly, nonatomic) _Bool hasPackageBit;
@property(readonly, nonatomic, getter=isAliasFile) _Bool aliasFile;
@property(readonly, nonatomic, getter=isSymbolicLink) _Bool symbolicLink;
@property(readonly, nonatomic, getter=isResolvable) _Bool resolvable;
@property(readonly, nonatomic, getter=isExecutable) _Bool executable;
@property(readonly, nonatomic, getter=isExecutableModeFile) _Bool executableModeFile;
@property(readonly, nonatomic, getter=isBusyDirectory) _Bool busyDirectory;
@property(readonly, nonatomic, getter=isDirectory) _Bool directory;
- (_Bool)getIsDirectory_NoIO:(_Bool *)arg1;	// IMP=0x0000000000010b7c
- (id)extensionWithError:(id *)arg1;	// IMP=0x0000000000011565
- (id)nameWithError:(id *)arg1;	// IMP=0x0000000000011408
- (id)canonicalPathWithError:(id *)arg1;	// IMP=0x00000000000113ee
- (id)pathWithError:(id *)arg1;	// IMP=0x00000000000113d7
- (_Bool)getFileSystemRepresentation:(char [1024])arg1 error:(id *)arg2;	// IMP=0x0000000000011321
- (id)canonical:(_Bool)arg1 pathWithError:(id *)arg2;	// IMP=0x0000000000011141
@property(readonly, nonatomic, getter=isOnLocalVolume) _Bool onLocalVolume;
@property(readonly, nonatomic, getter=isOnDiskImage) _Bool onDiskImage;
- (_Bool)getVolumeIdentifier:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011a40
@property(readonly, nonatomic, getter=isMountTrigger) _Bool mountTrigger;
@property(readonly, nonatomic, getter=isVolume) _Bool volume;
- (_Bool)getOwnerUID:(unsigned int *)arg1 error:(id *)arg2;	// IMP=0x0000000000011c96
- (_Bool)getFileIdentifier:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011c0e
- (_Bool)getInodeNumber:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011b86
- (_Bool)getDeviceNumber:(int *)arg1 error:(id *)arg2;	// IMP=0x0000000000011afe
- (id)bundleIdentifierWithContext:(struct LSContext *)arg1 error:(id *)arg2;	// IMP=0x0000000000011fc6
- (id)bundleIdentifierWithError:(id *)arg1;	// IMP=0x0000000000011faf
- (id)bundleInfoDictionaryWithError:(id *)arg1;	// IMP=0x0000000000011e54
- (struct __CFBundle *)copyCFBundleWithError:(id *)arg1;	// IMP=0x0000000000011d1e
- (_Bool)getWriterBundleIdentifier:(id *)arg1 error:(id *)arg2;	// IMP=0x00000000000128a4
- (_Bool)getHFSType:(unsigned int *)arg1 creator:(unsigned int *)arg2 error:(id *)arg3;	// IMP=0x000000000001259e
- (_Bool)getLength:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000012516
- (_Bool)getContentModificationDate:(double *)arg1 error:(id *)arg2;	// IMP=0x0000000000012502
- (_Bool)getCreationDate:(double *)arg1 error:(id *)arg2;	// IMP=0x0000000000012297
- (_Bool)setFinderInfo:(const CDUnion_739f5cf2 *)arg1 error:(id *)arg2;	// IMP=0x0000000000012a4b
- (_Bool)getFinderInfo:(CDUnion_739f5cf2 *)arg1 error:(id *)arg2;	// IMP=0x00000000000128f3
- (_Bool)canReadMetadataFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x00000000000130cd
- (_Bool)canWriteFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000013056
- (_Bool)canReadFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012fdf
- (_Bool)canReadMetadataWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012e97
- (_Bool)canWriteWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012e20
- (_Bool)canReadWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000012da9
- (_Bool)setExtendedAttribute:(id)arg1 name:(id)arg2 options:(int)arg3 error:(id *)arg4;	// IMP=0x00000000000136d2
- (id)extendedAttributeWithName:(id)arg1 options:(int)arg2 error:(id *)arg3;	// IMP=0x0000000000013215
- (id)initByResolvingBookmarkData:(id)arg1 relativeToNode:(id)arg2 bookmarkDataIsStale:(_Bool *)arg3 error:(id *)arg4;	// IMP=0x000000000001429d
- (id)initByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToNode:(id)arg3 bookmarkDataIsStale:(_Bool *)arg4 error:(id *)arg5;	// IMP=0x0000000000014098
- (id)bookmarkDataWithOptions:(unsigned long long)arg1 relativeToNode:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000013e0b
- (id)bookmarkDataRelativeToNode:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000013dee

@end

