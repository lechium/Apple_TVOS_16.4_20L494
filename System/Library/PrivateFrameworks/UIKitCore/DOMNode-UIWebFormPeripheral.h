//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <WebKitLegacy/DOMNode.h>

@class NSDictionary, NSIndexSet, NSString, RTIInputSystemSourceSession, UIColor, UIImage, UIInputContextHistory, UIResponder, UITextInputPasswordRules, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, _UISupplementalLexicon;
@protocol UITextInput, UITextInputDelegate, UITextInputPrivate, UITextInputSuggestionDelegate, UITextInputTokenizer;

@interface DOMNode (UIWebFormPeripheral)
- (id)createPeripheral;	// IMP=0x00200000006775cd
- (id)itemTitle;	// IMP=0x002000000067da7d
- (void)populateCell:(id)arg1;	// IMP=0x002000000067da77
- (id)createPickerCell;	// IMP=0x002000000067da6f
- (id)createSelectedItem;	// IMP=0x002000000067da67
- (id)_responderWindow;	// IMP=0x0020000000b74a99
- (id)inputAssistantItem;	// IMP=0x0020000000b74a49
- (id)_textInteraction;	// IMP=0x0020000000b749f9
- (id)_selectableText;	// IMP=0x0020000000b749f0
- (_Bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(_Bool)arg3;	// IMP=0x0020000000b748d2
- (void)_unmarkText;	// IMP=0x0020000000b74866
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000b74531
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000b744ab
- (_Bool)_hasMarkedText;	// IMP=0x0020000000b74429
- (_Bool)_usesAsynchronousProtocol;	// IMP=0x0020000000b743de
- (void)_setGestureRecognizers;	// IMP=0x0020000000b74074
- (long long)_selectionAffinity;	// IMP=0x0020000000b73ed1
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000b73e40
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000b73db2
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b73be1
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b73a10
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b736f6
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b733dc
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b731fa
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b73097
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b72e37
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b72bcb
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b728a7
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b72577
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b7223b
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000b71c64
- (id)_setHistory:(id)arg1 withExtending:(_Bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000b719ae
- (id)_setSelectionRangeWithHistory:(id)arg1;	// IMP=0x0020000000b7165a
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000b715e2
- (id)_fontForCaretSelection;	// IMP=0x0020000000b71494
- (id)_textColorForCaretSelection;	// IMP=0x0020000000b71346
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange)arg1;	// IMP=0x0020000000b71140
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;	// IMP=0x0020000000b7105e
- (id)_rangeOfSmartSelectionIncludingRange:(id)arg1;	// IMP=0x0020000000b70846
- (id)_findDocumentBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000b70755
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000b70522
- (id)_findBoundaryPositionClosestToPosition:(id)arg1 withGranularity:(long long)arg2;	// IMP=0x0020000000b704aa
- (_Bool)_range:(id)arg1 isEqualToRange:(id)arg2;	// IMP=0x0020000000b70346
- (id)_intersectionOfRange:(id)arg1 andRange:(id)arg2;	// IMP=0x0020000000b7018f
- (_Bool)_range:(id)arg1 intersectsRange:(id)arg2;	// IMP=0x0020000000b7010a
- (_Bool)_range:(id)arg1 containsRange:(id)arg2;	// IMP=0x0020000000b7006a
- (id)_rangeSpanningTextUnit:(long long)arg1 andPosition:(id)arg2;	// IMP=0x0020000000b6fdfe
- (id)_fullRange;	// IMP=0x0020000000b6fd57
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;	// IMP=0x0020000000b6fd3d
- (id)_rangeOfSentenceEnclosingPosition:(id)arg1;	// IMP=0x0020000000b6fd23
- (id)_rangeOfLineEnclosingPosition:(id)arg1;	// IMP=0x0020000000b6fd09
- (id)_rangeOfEnclosingWord:(id)arg1;	// IMP=0x0020000000b6fcef
- (id)_rangeOfTextUnit:(long long)arg1 enclosingPosition:(id)arg2;	// IMP=0x0020000000b6fbe7
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;	// IMP=0x0020000000b6f7de
- (id)_normalizedStringForRangeComparison:(id)arg1;	// IMP=0x0020000000b6f73f
- (void)_scrollRectToVisible:(struct CGRect)arg1 animated:(_Bool)arg2;	// IMP=0x0020000000b6f637
- (void)_replaceDocumentWithText:(id)arg1;	// IMP=0x0020000000b6f57d
- (void)_replaceCurrentWordWithText:(id)arg1;	// IMP=0x0020000000b6f49e
- (void)_transpose;	// IMP=0x0020000000b6f142
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000b6ef28
- (void)_deleteBackwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000b6eeeb
- (void)_deleteTextRange:(id)arg1;	// IMP=0x0020000000b6edac
- (void)_deleteToEndOfParagraph;	// IMP=0x0020000000b6eb8a
- (void)_deleteToEndOfLine;	// IMP=0x0020000000b6e968
- (void)_deleteToStartOfLine;	// IMP=0x0020000000b6e748
- (void)_deleteForwardByWord;	// IMP=0x0020000000b6e41d
- (void)_deleteByWord;	// IMP=0x0020000000b6e287
- (void)_setCaretSelectionAtEndOfSelection;	// IMP=0x0020000000b6e1a3
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;	// IMP=0x0020000000b6dece
- (id)_positionFromPosition:(id)arg1 pastTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000000b6dcf2
- (long long)_opposingDirectionFromDirection:(long long)arg1;	// IMP=0x0020000000b6dcd8
- (id)_positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x0020000000b6dc26
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;	// IMP=0x0020000000b6db04
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;	// IMP=0x0020000000b6daed
- (void)_expandSelectionToBackwardDeletionClusterWithReinsertionOut:(id *)arg1;	// IMP=0x0020000000b6d701
- (void)_moveCurrentSelection:(int)arg1;	// IMP=0x0020000000b6d551
- (void)_extendCurrentSelection:(int)arg1;	// IMP=0x0020000000b6d3c0
- (_Bool)_hasMarkedTextOrRangedSelection;	// IMP=0x0020000000b6d2f1
- (_Bool)_isEmptySelection;	// IMP=0x0020000000b6d234
- (struct CGRect)_selectionClipRect;	// IMP=0x0020000000b6d216
- (_Bool)_selectionAtDocumentEnd;	// IMP=0x0020000000b6d154
- (_Bool)_selectionAtDocumentStart;	// IMP=0x0020000000b6d092
- (_Bool)_selectionAtWordStart;	// IMP=0x0020000000b6cf48
- (void)_setSelectionToPosition:(id)arg1;	// IMP=0x0020000000b6cea7
- (id)_fullText;	// IMP=0x0020000000b6cdd9
- (id)_wordContainingCaretSelection;	// IMP=0x0020000000b6cc97
- (unsigned int)_characterInRelationToPosition:(id)arg1 amount:(int)arg2;	// IMP=0x0020000000b6cae6
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;	// IMP=0x0020000000b6c7f5
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000000b6c731
- (unsigned int)_characterBeforeCaretSelection;	// IMP=0x0020000000b6c71a
- (unsigned int)_characterAfterCaretSelection;	// IMP=0x0020000000b6c706
- (id)_textRangeFromNSRange:(struct _NSRange)arg1;	// IMP=0x0020000000b6c5e8
- (struct _NSRange)_nsrangeForTextRange:(id)arg1;	// IMP=0x0020000000b6c4ed
- (int)_indexForTextPosition:(id)arg1;	// IMP=0x0020000000b6c455
- (void)_selectAll;	// IMP=0x0020000000b6c3e8
- (struct _NSRange)_selectedRangeWithinMarkedText;	// IMP=0x0020000000b6c239
- (struct _NSRange)_selectedNSRange;	// IMP=0x0020000000b6c197
@property(nonatomic) long long _textInputSource;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
- (id)_keyInput;	// IMP=0x0020000000b6bf47
@property(readonly, nonatomic, getter=_proxyTextInput) UIResponder<UITextInput> *__content;
@property(readonly, nonatomic) UIView *textInputView;
- (id)urlScheme;	// IMP=0x00200000012060ab
- (id)tagName;	// IMP=0x002000000120605d
- (id)_realNode;	// IMP=0x0020000001208003
- (id)_textFormElement;	// IMP=0x002000000120817c
- (id)_previousAssistedNode;	// IMP=0x002000000120811f
- (id)_nextAssistedNode;	// IMP=0x00200000012080c2
- (void)_accessoryClear;	// IMP=0x00200000012080bc
- (_Bool)_supportsAccessoryClear;	// IMP=0x00200000012080b4
- (_Bool)_supportsAutoFill;	// IMP=0x00200000012080ac
- (_Bool)_requiresInputView;	// IMP=0x002000000120809a
- (_Bool)_requiresAccessoryView;	// IMP=0x0020000001208088
- (void)_stopAssistingDocumentView:(id)arg1;	// IMP=0x0020000001208051
- (void)_startAssistingDocumentView:(id)arg1;	// IMP=0x002000000120801a
- (_Bool)nodeCanBecomeFirstResponder;	// IMP=0x00200000012189fe
- (_Bool)isLikelyToBeginPageLoad;	// IMP=0x00200000012189f6
- (id)absoluteQuadsAtPoint:(struct CGPoint)arg1;	// IMP=0x00200000012189e4
- (_Bool)touchCalloutEnabled;	// IMP=0x00200000012189dc
- (id)tapHighlightColor;	// IMP=0x00200000012189ad
- (_Bool)alwaysAttemptToShowTapHighlight;	// IMP=0x002000000121899b
- (_Bool)showsTapHighlight;	// IMP=0x0020000001218993
@property(nonatomic) long long keyboardType;
- (_Bool)isSecure;	// IMP=0x00200000012286f6
- (_Bool)isTextControl;	// IMP=0x00200000012286ee
- (struct CGRect)convertRect:(struct CGRect)arg1 toView:(id)arg2;	// IMP=0x00200000012285a4
- (id)textDocument;	// IMP=0x002000000122b5c8
@property(nonatomic) long long selectionAffinity;
- (_Bool)editing;	// IMP=0x002000000122b56b
- (_Bool)editable;	// IMP=0x002000000122b563
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x002000000122b2ec
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x002000000122b2e6
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x002000000122b2de
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x002000000122b24d
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x002000000122b1d6
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x002000000122b141
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x002000000122b0be
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x002000000122b045
@property(copy, nonatomic) NSDictionary *markedTextStyle;
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x002000000122aec0
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x002000000122ad4b
- (_Bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x002000000122ad01
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x002000000122ac92
- (_Bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x002000000122ac48
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x002000000122abdf
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x002000000122ab62
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000122ab16
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000122aacb
@property(readonly, nonatomic) _Bool hasText;
- (void)unmarkText;	// IMP=0x002000000122aa46
@property(readonly, nonatomic) UITextRange *markedTextRange;
- (void)moveDown;	// IMP=0x002000000122a966
- (void)moveUp;	// IMP=0x002000000122a8f9
- (void)moveLeft;	// IMP=0x002000000122a88c
- (void)moveRight;	// IMP=0x002000000122a81f
- (struct CGRect)_lastRectForRange:(id)arg1;	// IMP=0x002000000122a6f9
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x002000000122a5de
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x002000000122a5c9
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x002000000122a5b1
- (void)replaceRange:(id)arg1 withText:(id)arg2 closeTyping:(_Bool)arg3;	// IMP=0x002000000122a4b9
- (id)rangeOfEnclosingWord:(id)arg1;	// IMP=0x002000000122a465
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000122a3c9
- (id)textInRange:(id)arg1;	// IMP=0x002000000122a350
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
@property(copy) UITextRange *selectedTextRange;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x002000000122a159
@property(readonly, nonatomic) UIView<UITextInputPrivate> *_textSelectingContainer;
- (void)setBecomesEditableWithGestures:(_Bool)arg1;	// IMP=0x002000000122a083
- (_Bool)becomesEditableWithGestures;	// IMP=0x002000000122a07b
- (_Bool)isEditing;	// IMP=0x002000000122a073
- (_Bool)isEditable;	// IMP=0x002000000122a06b
- (id)content;	// IMP=0x002000000122a063
- (void)updateSelection;	// IMP=0x002000000122a05d
- (id)selectionView;	// IMP=0x002000000122a032
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (_Bool)isAutoFillMode;	// IMP=0x0020000001229f94
- (void)acceptedAutoFillWord:(id)arg1;	// IMP=0x0020000001229f40
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1;	// IMP=0x0020000001229f26
- (void)updateAutoscroll:(id)arg1;	// IMP=0x0020000001229b40
- (id)automaticallySelectedOverlay;	// IMP=0x0020000001229afd
- (void)setInitialSelectionBehavior:(int)arg1;	// IMP=0x0020000001229af7
- (int)initialSelectionBehavior;	// IMP=0x0020000001229aef
@property(nonatomic) long long returnKeyType;
@property(nonatomic) int textLoupeVisibility;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(nonatomic) id textSuggestionDelegate;
- (_Bool)isShowingPlaceholder;	// IMP=0x0020000001229aaf
- (struct CGRect)convertCaretRect:(struct CGRect)arg1;	// IMP=0x0020000001229a2c
- (struct CGRect)caretRect;	// IMP=0x0020000001229923
- (void)setSelectionWithPoint:(struct CGPoint)arg1;	// IMP=0x0020000001229909
- (void)setSelectionWithPoint:(struct CGPoint)arg1 inset:(double)arg2;	// IMP=0x0020000001229886
- (id)text;	// IMP=0x0020000001229830
- (void)setText:(id)arg1;	// IMP=0x0020000001229799
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1 withInset:(double)arg2;	// IMP=0x00200000012295b2
- (int)selectionState;	// IMP=0x002000000122956f
- (void)selectAll;	// IMP=0x0020000001229512
- (_Bool)selectionAtWordStart;	// IMP=0x00200000012294cf
- (_Bool)selectionAtDocumentStart;	// IMP=0x002000000122948c
- (_Bool)hasSelection;	// IMP=0x0020000001229449
- (void)extendCurrentSelection:(int)arg1;	// IMP=0x00200000012293c2
- (id)rangeByExtendingCurrentSelection:(int)arg1;	// IMP=0x0020000001229370
- (id)rangeByMovingCurrentSelection:(int)arg1;	// IMP=0x002000000122931e
- (struct _NSRange)selectionRange;	// IMP=0x00200000012292db
- (int)wordOffsetInRange:(id)arg1;	// IMP=0x0020000001229289
- (id)textColorForCaretSelection;	// IMP=0x0020000001229270
- (id)fontForCaretSelection;	// IMP=0x0020000001229164
- (unsigned short)characterAfterCaretSelection;	// IMP=0x0020000001229121
- (void)replaceCurrentWordWithText:(id)arg1;	// IMP=0x002000000122904a
- (void)clearMarkedText;	// IMP=0x0020000001229029
- (id)rectsForNSRange:(struct _NSRange)arg1;	// IMP=0x0020000001228fad
- (void)confirmMarkedText:(id)arg1;	// IMP=0x0020000001228ec2
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000001228df8
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000001228da6
- (void)removeTextPlaceholder:(id)arg1;	// IMP=0x0020000001228d75
- (id)insertTextPlaceholderWithSize:(struct CGSize)arg1;	// IMP=0x0020000001228d33
- (struct CGRect)frameForDictationResultPlaceholder:(id)arg1;	// IMP=0x0020000001228ccb
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(_Bool)arg2;	// IMP=0x0020000001228c8b
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
- (id)metadataDictionariesForDictationResults;	// IMP=0x0020000001228c35
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;	// IMP=0x0020000001228bf5
- (void)endFloatingCursor;	// IMP=0x0020000001228bca
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1 animated:(_Bool)arg2;	// IMP=0x0020000001228b7f
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001228b3d
- (void)beginFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001228afb
- (id)uiWebDocumentView;	// IMP=0x0020000001228ab8
- (void)insertText:(id)arg1;	// IMP=0x0020000001228a37
- (void)deleteBackward;	// IMP=0x00200000012289b9
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
- (void)endSelectionChange;	// IMP=0x002000000122897a
- (void)beginSelectionChange;	// IMP=0x0020000001228949
- (void)handleKeyWebEvent:(id)arg1;	// IMP=0x00200000012288f7
- (_Bool)requiresKeyEvents;	// IMP=0x00200000012288ef
- (id)delegate;	// IMP=0x00200000012288e7
- (void)setSecure:(_Bool)arg1;	// IMP=0x00200000012288e1
- (id)textInputTraits;	// IMP=0x0020000001228795
- (void)setupPlaceholderTextIfNeeded;	// IMP=0x002000000122878f
@property(nonatomic) _Bool isSingleLineDocument;
- (_Bool)hasContent;	// IMP=0x0020000001228737
- (void)takeTraitsFrom:(id)arg1;	// IMP=0x0020000001228706

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool forceSpellingDictation;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(retain, nonatomic) UIColor *insertionPointColor;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) long long selectionGranularity;
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(readonly, nonatomic) _Bool supportsImagePaste;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;
@end

